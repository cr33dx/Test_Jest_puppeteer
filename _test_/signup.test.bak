const puppet = require('puppeteer')
require('jestdom/extendexpect')

var config = require('config')
var signup = config.get('Signup')
console.log(signup)
const fs = require('fs')
var width = 1400, height = 1080
var page
var browser
var random = Math.floor(1000 + Math.random() * 9000)
var email = `emma_test${random}@yopmail.com`
//var sname = signup.fname+signup.lname+random

jest.setTimeout(50000)
describe('Checking If User Gets Registered',()=>{
    async function addClear(title){
        await page.type('#companyName','emma_test')
        await page.type('#email','emmatest123@yopmail.com')
        await page.type('#firstName', 'Emma')
        await page.type('#lastName', 'Test')
        await page.type('#tenantId', 'emmatest1235333')
        await page.type('#password', 'test@12345')
        await page.click('label[for=termsCondition]')
        await page.click('#'+title,{clickCount:3})
        await page.keyboard.press('Backspace')
        await page.waitFor(2000)
    }
    beforeAll(async (done)=>{
        browser = await puppet.launch({
            //browserWSEndpoint : 'ws://localhost:9229/devtools/browser/fd8c31e033d14f07b69af3cc787b3f50',
            headless : false,
            args: [`windowsize=${width},${height}`],
            slowMo :20,
            devtools:true
        })
        page = await browser.newPage()
        await page.setViewport({width, height})
        await page.goto(signup.url,{waitUntil:'load',timeout:0})
        done()
    },150000)
    
    test('Check For Company Name', async (done)=>{
        await addClear('companyName')
        await page.waitFor(2000)
        flag = await page.evaluate(()=>{
            let x = 0
            if(document.getElementsByClassName('mdcform')[0].children[2]!=null)x = 1
            return x
        })
        expect(flag).toEqual(1)
        done()
    })
    test('check for Email',async (done)=>{
        await page.reload({waitUntil:'load'})
        await addClear('email')
        await page.waitFor(2000)
        await page.click('button[id=next]')
        await page.waitFor(4000)
        flag = await page.evaluate(()=>{
            let x = 0
            if(document.getElementsByClassName('mdcform')[1].children[2]!=null)x = 1
            return x
        })
        expect(flag).toEqual(1)
        done()
    })
    test('check for Name',async (done)=>{
        await page.reload({waitUntil:'load'})
        await addClear('firstName')
        await page.waitFor(2000)
        await page.click('button[id=next]')
        await page.waitFor(4000)
        flag = await page.evaluate(()=>{
            let x = 0
            if(document.getElementsByClassName('mdcform')[2].children[2]!=null)x = 1
            return x
        })
        expect(flag).toEqual(1)
        done()
    })
    test('check for Tenant Id',async (done)=>{
        await page.reload({waitUntil:'load'})
        await addClear('tenantId')
        await page.waitFor(2000)
        await page.click('button[id=next]')
        await page.waitFor(4000)
        flag = await page.evaluate(()=>{
            let x = 0
            if(document.getElementsByClassName('mdcform')[3].children[2]!=null)x = 1
            return x
        })
        expect(flag).toEqual(1)
        done()
    })

    
    describe('check for password',()=>{
        test('check if error shows for > 8 char password',async(done)=>{
            await page.reload({waitUntil:'load'})
            await addClear('password')
            await page.waitFor(2000)
            await page.type('#password','hell')
            await page.click('button[id=next]')
            await page.waitFor(4000)
            flag = await page.evaluate(()=>{
                let x = 0
                if(document.getElementsByClassName('mdcform')[7].children[2]!=null)x = 1
                return x
            })
            expect(flag).toEqual(1)
            done()
        })

        test('check if error shows up if all chars alphabet no nums', async (done)=>{
            await page.reload({waitUntil:'load'})
            await addClear('password')
            await page.waitFor(2000)
            await page.type('#password','hellworld')
            await page.click('button[id=next]')
            await page.waitFor(4000)
            flag = await page.evaluate(()=>{
                let x = 0
                if(document.getElementsByClassName('mdcform')[7].children[2]!=null)x = 1
                return x
            })
            expect(flag).toEqual(1)
            done()
        })

        test('check if error shows up if all alphanum', async (done)=>{
            await page.reload({waitUntil:'load'})
            await addClear('password')
            await page.waitFor(2000)
            await page.type('#password','hellworld987')
            await page.click('button[id=next]')
            await page.waitFor(4000)
            flag = await page.evaluate(()=>{
                let x = 0
                if(document.getElementsByClassName('mdcform')[7].children[2]!=null)x = 1
                return x
            })
            expect(flag).toEqual(1)
            done()
        })

        test('check if error shows up if all Nums', async (done)=>{
            await page.reload({waitUntil:'load'})
            await addClear('password')
            await page.waitFor(2000)
            await page.type('#password','12345678')
            await page.click('button[id=next]')
            await page.waitFor(4000)
            flag = await page.evaluate(()=>{
                let x = 0
                if(document.getElementsByClassName('mdcform')[7].children[2]!=null)x = 1
                return x
            })
            expect(flag).toEqual(1)
            done()
        })
    })
    
})