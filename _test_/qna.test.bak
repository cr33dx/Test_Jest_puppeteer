const puppet = require('puppeteer')
require('jest-dom/extend-expect')
const config = require('config')
var width = 1400, height = 1080
var page
var browser
var quest = require('../learn')
var signin = config.get('Login')
jest.setTimeout(50000)
describe('test for qna pages',()=>{
    
    //############################################################HELPER FUNCTIONS#########################################################################    
    async function search(title){
        //this function searches for given title and waits for .mq-card to show up
        await page.type('input[type=search]',title)
        await page.click('i.fa-search')
        //await page.waitFor('//*[@id="kb-manage-qna"]/div[2]/section/div[1]/div/div')//necessary to wait for further steps
        await page.waitFor(5000)
    }

    async function getTitle(){
       return (await page.evaluate(()=>{  
            return document.getElementsByClassName('mq-card')[Math.floor((Math.random()*10)%4)].children[3].textContent
        }))
    }

    async function getSearchResult(title){
        await page.waitFor(1000)
        await page.waitFor('div.mq-card')
        await page.waitFor(1000)
        let flag = page.evaluate(()=>{
            let flag = 0
            let x = document.getElementsByClassName('mq-card')
            for(i = 0;i<x.length;i++){
                if(x[i].children[3].textContent == 'title')
                    debugger
                    flag =  1 
            }
            return flag
        })
        return flag
    }
    async function getMostAns(){
        await page.waitFor(3000)
        let flag = await page.evaluate(()=>{
            let x = document.getElementsByClassName('gtk')
            let flag = 0
            for(i=1;i<x.length-1;i++){
                if(parseInt(x[0].children[0].textContent.replace ( /[^\d.]/g, '' ))<parseInt(x[i].children[0].textContent.replace ( /[^\d.]/g, '' ))){
                    flag = 1
                }
            }
            return flag
        })
        return flag
    }

    async function getLeastAns(){
        await page.waitFor(3000)
        let flag = await page.evaluate(()=>{
            let x = document.getElementsByClassName('gtk')
            let flag = 0
            for(i=1;i<x.length-1;i++){
                if(parseInt(x[0].children[0].textContent.replace ( /[^\d.]/g, '' ))>parseInt(x[i].children[0].textContent.replace ( /[^\d.]/g, '' ))){
                    debugger
                    flag = 1
                }
            }
            return flag
        })
        return flag
    }

    async function getFlagsAccToFilter(filter){
        await page.waitFor(3000)
        return (await page.evaluate((filter)=>{
            let x = document.getElementsByClassName('mq-card')
            for(i=0;i<=x.length-1;i++){
                if(x[i].children[0].textContent != filter){
                    return 1
                }
            }
        },filter))
    }
    async function getFlagByTitle(title){
        await page.waitFor(3000)
        return(await page.evaluate((title)=>{
            //debugger
            let elem = document.getElementsByClassName('mq')
            for(i=0;i<=elem.length-1;i++){
                if(elem[i].textContent == title+'?'){
                    return elem[i].parentElement.children[0].textContent
                }
            }
        },title))
    }
    async function openUpBot(){
        const newPagePromise = new Promise(x => browser.once('targetcreated', target => x(target.page())))
        await page.click('a.to-btn')
        return(await newPagePromise)
    }
    
    async function filterClicker(filter){
        //this function clicks on diffrent filters i.e all, unpublished, published.
        await page.waitFor(4000)
        await page.click('#kb-manage-qna > div.main-section > div > div.col-sm-8 > div.fiter-section > div:nth-child(1) > div > button')
        switch (filter){
            case 'all':
            await page.click('#kb-manage-qna > div.main-section > div > div.col-sm-8 > div.fiter-section > div:nth-child(1) > div > div > button:nth-child(1)')
            await page.waitFor(4000)
            break

            case 'published':
            await page.click('#kb-manage-qna > div.main-section > div > div.col-sm-8 > div.fiter-section > div:nth-child(1) > div > div > button:nth-child(2)')
            await page.waitFor(4000)
            break

            case 'unpublished':
            await page.click('#kb-manage-qna > div.main-section > div > div.col-sm-8 > div.fiter-section > div:nth-child(1) > div > div > button:nth-child(3)')
            await page.waitFor(4000)
            break
        }
    }

    async function ansFilterClicker(filter){
        await page.waitFor(4000)
        await page.click('#kb-manage-qna > div.main-section > div > div.col-sm-8 > div.fiter-section > div:nth-child(2) > div > button')
        switch (filter){
            case 'latest':
            await page.click('#kb-manage-qna > div.main-section > div > div.col-sm-8 > div.fiter-section > div:nth-child(2) > div > div > button:nth-child(1)')
            await page.waitFor(4000)
            break
            
            case 'mostans' :
            await page.click('#kb-manage-qna > div.main-section > div > div.col-sm-8 > div.fiter-section > div:nth-child(2) > div > div > button:nth-child(2)')
            await page.waitFor(4000)
            break
            
            case 'leastans' :
            await page.click('#kb-manage-qna > div.main-section > div > div.col-sm-8 > div.fiter-section > div:nth-child(2) > div > div > button:nth-child(3)')
            await page.waitFor(4000)
            break
        }
    }

    async function clickPublish(){
        await page.waitFor('div.main-section')
        await page.waitFor(2000)
        await page.click('#kb-manage-qna > div.main-section > div > div.col-sm-8 > div.download-section-add > button:nth-child(3)') //clicking train and publish button
        await page.waitFor(60000)
    }
//######################################################INITALIZING BROWSER FOR RUNNING TEST CASES#######################################################
    beforeAll(async (done)=>{
        title = Math.random().toString(36).substr(2, 5)//necessary initialisation of title to be used as unique question 
        browser = await puppet.launch({
            //browserWSEndpoint : 'ws://localhost:9229/devtools/browser/fd8c31e0-33d1-4f07-b69a-f3cc787b3f50',
            headless : false,
            args: [`--window-size=${width},${height}`],
            slowMo :20,
            devtools:true
        })
        page = await browser.newPage()
        await page.setViewport({width, height})
        await page.goto(signin.tenant_url,{waitUntil:'load'})
        await page.type('input[name=username]',signin.tenant_username)
        await page.type('input[name=password]',signin.tenant_password)
        await page.click('input[type=submit]')
        await page.waitForNavigation({waitUntil:'load'}) //Read Docs
        done()
    },40000)

//########################################################TESTS BEGIN FROM HERE#########################################################################
    test.only('testing if qna opens up',async (done)=>{
        await page.waitFor('//*[@id="root"]/div/div/div/div[1]/div/nav/ul/li[2]/a')
        let elem = await page.$('#root > div > div > div > div.sidebar > div > nav > ul > li:nth-child(2) > a')
        await elem.click()
        await page.waitFor('//*[@id="kb-manage-qna"]/div[2]/section/div[1]/div[1]/div')
        expect(page.url()).toEqual(`https://yopqaz.apps-test.virtualpeople.ai/qna`)
        done()
    },30000)

    test.skip('Modal is opening up and showing',async (done)=>{
        await page.waitFor(2000)
        let upload = await page.$('#kb-manage-qna > div.main-section > div > div.col-sm-4 > div > span')

        await upload.click()
        await page.waitFor(()=>document.querySelector('div.modal-content'))
        let check = page.$('body > div:nth-child(8) > div > div.modal.fade.show > div > div')
        flag = 0
        check==null?flag=1:null
        expect(flag).toEqual(0)
        done()
    })

    test('if adding duplicate data is being detected', async (done)=>{
        await page.waitFor(()=>document.querySelector('div.mq-card'))
        await page.waitFor(2000)
        let dup = await getTitle()
        await page.click('span[class=add-ico]')
        await page.waitFor(2000)
        await page.type('input[name=question]',dup)
        await page.type('div[role=textbox]','lmao lol huhuhu')
        await page.waitFor(1000)
        let error = await page.$('body > div:nth-child(7) > div > div.modal.fade.show > div > div > div > form > div.alert.alert-danger')//Refactor no hardcoding don't use flag try using jest-dom
        flag = 0
        error==null?flag=1:null
        expect(flag).toEqual(0)
        done()
    })
    test('adding unqiue data and checkin if it is unpublished',async()=>{
        await page.click('input[name=question]',{clickCount : 3})
        await page.type('input[name=question]',title)
        await page.click('button[type=submit]')
        await page.waitFor(1000)
        //Click Again because it wont submit
        await page.click('button[type=submit]')
        await page.waitFor(1000)
        let x = await getFlagByTitle(title)
        let flag = await page.evaluate(()=>{
            return document.getElementsByClassName('q-status-unpublished')[0].textContent
        })
        //if(flag == title) THis is breaking code
        expect(x).toEqual(flag)
    },150000)
    //DO REFACTOR THIS TEST
    test('publishing ans testing if flag is set to published',async (done)=>{
        await page.reload({waitUntil:'load'})
        await page.waitFor('//*[@id="kb-manage-qna"]/div[2]/div/div[2]/div[2]/button[2]')
        await clickPublish()
        await page.waitFor('div.mq-card')
        await page.waitFor(2000)
        let x = await getFlagByTitle(title)
        await page.waitFor(2000)
        let flag = await page.evaluate(()=>{
            return document.getElementsByClassName('q-status')[0].textContent
        })
        console.log('value that is expected' + flag)
        console.log('value which i have recieved from fucntion' + x)
        expect(x).toEqual(flag)
        done()
    },150000)

    test.skip('Check If Bot is Responding to user Requests',async (done)=>{
        await page.waitFor('#root > div > div > header > ul > li.d-md-down-none.try-out-bot.nav-item > a')
        let popup = await openUpBot()
        console.log(popup.url())
        await popup.waitFor('div.wc-message>div>div>div>p')
        await popup.waitFor(2000)
        var text = await popup.evaluate(()=>{
            return document.querySelector('div.wc-message>div>div>div>p').textContent
        })
        expect(text).toEqual('I am Emma, your virtual assistant. Go ahead and ask me questions like –')
        done()
    },20000)

    test('check for editing', async (done)=>{
        //await page.bringToFront()
        await page.reload({waitUntil: 'load'})
        await page.waitFor(5000)
        await page.click('img[alt=edit]')//click edit button
        await page.waitFor('div.modal-body')
        await page.type('div[role=textbox]', "hhhahahfslfkn ")
        await page.click('button[type=submit]')
        await page.waitFor(4000)
        let updated = await page.evaluate(()=>{
            return document.querySelector('div.gtk').children[2].textContent
        })
        
        expect(updated).toEqual(expect.stringContaining('Yopqaz Yopqaz'))
        done()
    })

    test('testing Delete', async (done)=>{
        await page.waitFor(2000)
        await page.click('img[alt=delete]')
        await page.waitFor(1500)
        await page.click('button.btn-primary')
        await page.waitFor(()=>document.querySelector('div.mq-card'))
        await clickPublish()
       done()
    },90000)

    test('testing for search',async (done)=>{
        await page.reload({waitUntil:'load'})
        await page.waitFor(5000)
        let title = await getTitle()
        await search(title)
        expect(await getSearchResult(title)).toEqual(1)
        done()
    })

    test('testing If search Detects UpperCase',async (done)=>{
        await page.reload({waitUntil:'load'})
        await page.waitFor(5000)
        let title = await getTitle()
        await search(title.toUpperCase())
        expect(await getSearchResult(title)).toEqual(1)
        done()
    })
    test('testing if search detects a single character', async (done)=>{
        await page.reload({waitUntil:'load'})
        await page.waitFor(5000)
        let title = await getTitle()
        await search(await getTitle())
        expect(await getSearchResult(title)).toEqual(1)
        done()
    })

    test('checking for Published Filter', async(done)=>{
        await filterClicker('published')
        expect(await getFlagsAccToFilter(' Published ')).toBeUndefined()
        done()
    })

    test('checking for Unpublished Filter', async (done)=>{
        await page.reload({waitUntil:'load'})
        await page.waitFor(2000)
        await filterClicker('unpublished')
        expect(await getFlagsAccToFilter(' Unpublished ')).toBeUndefined()
        done()
    })

    test('checking for Most Answered Filter', async (done)=>{
        await page.reload({waitUntil:'load'})
        await ansFilterClicker('mostans')
        //await page.waitFor(5000)
        let flag = await getMostAns()
        expect(flag).toEqual(0)
        done()
    })

    test('checking Published With Most Answered', async (done)=>{
        await page.reload({waitUntil:'load'})
        await filterClicker('published')
        await ansFilterClicker('mostans')
        let flag = await getMostAns()
        expect(flag).toEqual(0)
        done()
    })

    test('checking Published With Least Answered', async (done)=>{
        await page.reload({waitUntil:'load'})
        await filterClicker('published')
        await ansFilterClicker('leastans')
        let flag = await getLeastAns()
        expect(flag).toEqual(0)
        done()
    })

    test('checking Unpublished With Most Answered', async (done)=>{
        await page.reload({waitUntil:'load'})
        await filterClicker('unpublished')
        await ansFilterClicker('mostans')
        let flag = await getLeastAns()
        expect(flag).toEqual(0)
        done()
    })

    test('checking Unpublished With Least Answered', async (done)=>{
        await page.reload({waitUntil:'load'})
        await filterClicker('unpublished')
        await ansFilterClicker('leastans')
        let flag = await getLeastAns()
        expect(flag).toEqual(0)
        done()
    })
})

